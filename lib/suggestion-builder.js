"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const fuzzaldrin_1 = require("fuzzaldrin");
const typeScope = ['meta.type-signature.haskell'];
const sourceScope = ['source.haskell'];
const moduleScope = ['meta.import.haskell', 'support.other.module.haskell'];
const preprocessorScope = ['meta.preprocessor.haskell'];
const instancePreprocessorScope = ['meta.declaration.instance.haskell', 'meta.preprocessor.haskell'];
const exportsScope = ['meta.import.haskell', 'meta.declaration.exports.haskell'];
const pragmaWords = [
    'LANGUAGE', 'OPTIONS_GHC', 'INCLUDE', 'WARNING', 'DEPRECATED', 'INLINE',
    'NOINLINE', 'ANN', 'LINE', 'RULES', 'SPECIALIZE', 'UNPACK', 'SOURCE'
];
const instancePragmaWords = [
    'INCOHERENT',
    'OVERLAPPABLE',
    'OVERLAPPING',
    'OVERLAPS'
];
const operatorRx = /([\w.']+\.)?\(?([^'\w\s]+)\)?$/;
class SuggestionBuilder {
    constructor(options, backend) {
        this.options = options;
        this.backend = backend;
        this.buffer = this.options.editor.getBuffer();
        this.lineRange = new atom_1.Range([this.options.bufferPosition.row, 0], this.options.bufferPosition);
        this.line = this.buffer.getTextInRange(this.lineRange);
        this.mwl =
            this.options.activatedManually ?
                0
                :
                    atom.config.get('autocomplete-plus.minimumWordLength');
    }
    getSuggestions() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isIn(instancePreprocessorScope)) {
                return this.preprocessorSuggestions(instancePragmaWords);
            }
            else if (this.isIn(typeScope)) {
                return this.symbolSuggestions(this.backend.getCompletionsForType.bind(this.backend));
            }
            else if (this.isIn(moduleScope)) {
                return this.moduleSuggestions();
            }
            else if (this.isIn(exportsScope)) {
                return this.symbolSuggestions(this.backend.getCompletionsForSymbolInModule.bind(this.backend));
            }
            else if (this.isIn(preprocessorScope)) {
                return this.preprocessorSuggestions(pragmaWords);
            }
            else if (this.isIn(sourceScope)) {
                if (this.getPrefix().startsWith('_')) {
                    return this.symbolSuggestions(this.backend.getCompletionsForHole.bind(this.backend));
                }
                else if (this.getPrefix() === '' && this.getPrefix(operatorRx) !== '') {
                    return this.operatorSuggestions();
                }
                else {
                    return this.symbolSuggestions(this.backend.getCompletionsForSymbol.bind(this.backend));
                }
            }
            else {
                return [];
            }
        });
    }
    lineSearch(rx, idx = 0) {
        const match = this.line.match(rx);
        if (match) {
            return match;
        }
        else {
            return [''];
        }
    }
    isIn(scope) {
        return scope.every((s1) => this.options.scopeDescriptor.getScopesArray().includes(s1));
    }
    getPrefix(rx) {
        if (!rx) {
            rx = /[\w.']+$/;
        }
        return this.lineSearch(rx)[0];
    }
    buildSymbolSuggestion(s, prefix) {
        return {
            text: s.qname ? s.qname : s.name,
            rightLabel: (s.module ? s.module.name : undefined),
            type: s.symbolType,
            replacementPrefix: prefix,
            description: s.name + ' :: ' + s.typeSignature
        };
    }
    buildSimpleSuggestion(type, text, prefix, label) {
        return {
            text,
            type,
            replacementPrefix: prefix,
            rightLabel: label
        };
    }
    processSuggestions(f, rx, p) {
        return __awaiter(this, void 0, void 0, function* () {
            const prefix = this.getPrefix(rx);
            if (prefix.length < this.mwl) {
                return [];
            }
            const symbols = yield f(this.buffer, prefix, this.options.bufferPosition);
            return symbols.map((s) => p(s, prefix));
        });
    }
    symbolSuggestions(f, rx) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.processSuggestions(f, rx, this.buildSymbolSuggestion.bind(this));
        });
    }
    moduleSuggestions() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.processSuggestions(this.backend.getCompletionsForModule.bind(this.backend), undefined, (s, prefix) => this.buildSimpleSuggestion('import', s, prefix));
        });
    }
    preprocessorSuggestions(pragmaList) {
        let f;
        const kwrx = new RegExp(`\\b(${pragmaList.join('|')})\\b`);
        const kw = this.lineSearch(kwrx)[0];
        let label = '';
        let rx;
        switch (false) {
            case kw !== 'OPTIONS_GHC':
                rx = /[\w-]+$/;
                label = 'GHC Flag';
                f = this.backend.getCompletionsForCompilerOptions;
                break;
            case kw !== 'LANGUAGE':
                label = 'Language';
                f = this.backend.getCompletionsForLanguagePragmas;
                break;
            case !!kw:
                label = 'Pragma';
                f = (b, p) => __awaiter(this, void 0, void 0, function* () { return fuzzaldrin_1.filter(pragmaList, p); });
                break;
            default:
                return [];
        }
        return this.processSuggestions(f, rx, (s, prefix) => this.buildSimpleSuggestion('keyword', s, prefix, label));
    }
    operatorSuggestions() {
        return __awaiter(this, void 0, void 0, function* () {
            const prefixMatch = this.lineSearch(operatorRx);
            if (!prefixMatch) {
                return [];
            }
            const [mod, op] = prefixMatch.slice(1);
            if (prefixMatch[0].length < this.mwl) {
                return [];
            }
            const mkQName = (sym) => {
                const { name, qname } = sym;
                const newQName = qname.slice(0, -name.length) + name.slice(1, -1);
                return Object.assign({}, sym, { qname: newQName });
            };
            const symbols = yield this.backend.getCompletionsForSymbol(this.buffer, `${mod || ''}(${op}`, this.options.bufferPosition);
            const newSyms = symbols
                .filter(({ symbolType }) => symbolType === 'operator')
                .map(mkQName);
            const allSyms = fuzzaldrin_1.filter(symbols.concat(newSyms), prefixMatch[0], { key: 'qname' });
            return allSyms.map((s) => this.buildSymbolSuggestion(s, prefixMatch[0]));
        });
    }
}
exports.SuggestionBuilder = SuggestionBuilder;
//# sourceMappingURL=data:application/json;base64,